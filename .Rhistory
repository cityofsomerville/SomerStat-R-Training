cache_dir <- "docs/_cache"
if (dir.exists(cache_dir)) {
unlink(cache_dir, recursive = TRUE)
}
rmarkdown::run("docs/index.Rmd")
library(learnr)
library(tidyverse)
library(Lahman)
library(RSocrata)
library(stringr)
socrataUrl <-"https://data.somervillema.gov/resource" ## not sensitive
generateUrl <- function (datasetID) paste(
socrataUrl,
paste(datasetID, 'json', sep="."),
sep="/"
)
## all of this is actually pre-computed so the people can pick up anywhere in the exercise
datasetID <- "pfjr-vzaw"
url <- generateUrl(datasetID)
happinessSurveyData <- RSocrata::read.socrata(url)
only17Younger <- happinessSurveyData %>% dplyr::filter(happinessSurveyData$age == "17 or younger")
tutorial_options(exercise.eval = FALSE,
exercise.timelimit = 60,
# A checker function that compares the expected and actual results
exercise.checker = function(label, user_code, solution_code, check_code, envir_result, evaluate_result, ...) {
if(user_code == solution_code){
return(list(correct = TRUE, message = "That's exactly how we did it!"))
}
user_result <- eval(parse(text = user_code), envir = envir_result)
correct_result <- eval(parse(text = solution_code), envir = envir_result)
if (nrow(user_result) == nrow(correct_result) && all.equal(user_result, correct_result) == TRUE) {
return(list(correct = TRUE, message = "Great job!"))
} else {
return(list(correct = FALSE, message = "Check your answer and try again."))
}
}
)
knitr::opts_chunk$set(error = TRUE)
View(happinessSurveyData)
mean <- dplyr::mean(happinessSurveyData$happiness_5pt_num)
mean <- mean(happinessSurveyData$happiness_5pt_num)
mean <- mean(happinessSurveyData$happiness_5pt_num, na.rm = TRUE)
mean <- mean(df[["happiness_5pt_num"]])
mean <- mean(happinessSurveyData[["happiness_5pt_num"]])
mean <- colMeans(happinessSurveyData[["happiness_5pt_num"]])
mean <- colMean(happinessSurveyData[["happiness_5pt_num"]])
summary(happinessSurveyData$happiness_5pt_num)
happinessSurveyData$happiness_5pt_num <- as.numeric(happinessSurveyData$happiness_5pt_num)
mean <- mean(happinessSurveyData[["happiness_5pt_num"]])
mean <- mean(happinessSurveyData[["happiness_5pt_num"]], na.rm = TRUE)
QAdataframe <- NA ## TODO
## this dataframe should have three columns, mean, median, and stdev with idk how many rows yet I'll get back to you once I make the answer.
QAdataframe <- happinessSurveyData %>%
# Specify group indicator, column, function
group_by(year) %>%
# Calculate the mean of the "Frequency" column for each group
summarise_at(vars(happiness_5pt_num),
list(mean = mean))
QAdataframe <- happinessSurveyData %>%
# Specify group indicator, column, function
group_by(year) %>%
# Calculate the mean of the "Frequency" column for each group
summarise_at(vars(happiness_5pt_num),
list(test = mean))
## this dataframe should have three columns, mean, median, and stdev with idk how many rows yet I'll get back to you once I make the answer.
QAdataframe <- happinessSurveyData %>%
# Specify group indicator, column, function
group_by(year) %>%
# Calculate the mean of the "Frequency" column for each group
summarise(across((vars(happiness_5pt_num),
QAdataframe <- happinessSurveyData %>%
# Specify group indicator, column, function
group_by(year) %>%
# Calculate the mean of the "Frequency" column for each group
summarise((across(vars(happiness_5pt_num),
list(test = mean))))
QAdataframe <- happinessSurveyData$happiness_5pt_num %>%
# Specify group indicator, column, function
group_by(year) %>%
# Calculate the mean of the "Frequency" column for each group
summarise(test = mean)
QAdataframe <- happinessSurveyData %>%
group_by(year) %>%
summarise(test = mean(happiness_5pt_num))
View(QAdataframe)
QAdataframe <- happinessSurveyData %>%
group_by(year) %>%
summarise(mean = mean(happiness_5pt_num), median = median(happiness_5pt_num), stdev = stdev(happiness_5pt_num))
QAdataframe <- happinessSurveyData %>%
group_by(year) %>%
summarise(mean = mean(happiness_5pt_num), median = median(happiness_5pt_num), stdev = sd(happiness_5pt_num))
View(QAdataframe)
QAdataframe <- happinessSurveyData %>%
group_by(year) %>%
summarise(mean = mean(happiness_5pt_num, na.rm = TRUE), median = median(happiness_5pt_num, na.rm = TRUE), stdev = sd(happiness_5pt_num, na.rm = TRUE))
View(QAdataframe)
happinessSurveyData$police_department_satisfaction_5pt_num <- as.numeric(happinessSurveyData$police_department_satisfaction_5pt_num)
test <- happinessSurveyData %>%
group_by(year) %>%
summarise(mean = mean(police_department_satisfaction_5pt_num_department_satisfaction_5pt_num, na.rm = TRUE), stdev = sd(police_department_satisfaction_5pt_num, na.rm = TRUE))
test <- happinessSurveyData %>%
group_by(year) %>%
summarise(mean = mean(police_department_satisfaction_5pt_num, na.rm = TRUE), median = median(police_department_satisfaction_5pt_num, na.rm = TRUE), stdev = sd(police_department_satisfaction_5pt_num, na.rm = TRUE))
View(test)
View(QAdataframe)
happinessDataCleaned <- happinessSurveyData %>% filter(!age == "17 or younger") %>% select(-age)
View(happinessDataCleaned)
happinessDataCleaned <- happinessSurveyData %>% filter(!age == "17 or younger" && !is.na(age)) %>% select(-age)
happinessDataCleaned <- happinessSurveyData %>% filter(!(age == "17 or younger" | is.na(age))) %>% select(-age)
happinessDataCleaned <- happinessSurveyData %>% filter((!(age == "17 or younger") && !(is.na(age)))) %>% select(-age)
happinessDataCleaned <- happinessSurveyData %>% filter(!(age == "17 or younger" | is.na(age)) %>% select(-age))
happinessDataCleaned <- happinessSurveyData %>% filter((age == "17 or younger" && !is.na(age)) %>% select(-age))
happinessDataCleaned <- happinessSurveyData %>% filter((age == "17 or younger" & !is.na(age)) %>% select(-age))
happinessDataCleaned <- happinessSurveyData %>% filter(!(age == "17 or younger" & !is.na(age)) %>% select(-age))
happinessDataCleaned <- happinessSurveyData %>% filter(!(age == "17 or younger" & !is.na(age))) %>% select(-age)
View(happinessDataCleaned)
library(knitr)
library(shiny)
rmdfiles <- c("docs/index.Rmd")
sapply(rmdfiles, knit, quiet = T)
ui <- shinyUI(
fluidPage(
withMathJax(includeMarkdown("docs/index.Rmd"))
)
)
server <- function(input, output) { }
shinyApp(ui, server)
rmarkdown::run("docs/index.Rmd")
cache_dir <- "docs/_cache"
output <- rmarkdown::run("docs/index.Rmd")
install.packages("shinylive")
system.file("examples", "01_hello", package="shiny") |>
fs::dir_copy("myapp", overwrite = TRUE)
system.file("examples", "01_hello", package="shiny") |>
fs::dir_copy("myapp", overwrite = TRUE)
runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
learnr::tutorial("docs/index.Rmd")
runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs")
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs")
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs")
runApp()
runApp()
